"use client";

import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import {
  Bold,
  Italic,
  List,
  ListOrdered,
  Heading1,
  Heading2,
  Undo,
  Redo,
  FileImage,
  Pilcrow,
  TextQuote,
  Code,
  Link as LinkIcon,
} from "lucide-react";
import { Input } from "@/components/ui/input";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";

// Tiptap imports
import { useEditor, EditorContent, BubbleMenu } from "@tiptap/react";
import StarterKit from "@tiptap/starter-kit";
import Image from "@tiptap/extension-image";
import Link from "@tiptap/extension-link";
import Placeholder from "@tiptap/extension-placeholder";
import TextStyle from "@tiptap/extension-text-style";
import Color from "@tiptap/extension-color";
import axios from "@/lib/axios";

// Add custom CSS for the editor
import "./editor.css";

interface ArticleEditorProps {
  content: string;
  onChange: (content: string) => void;
  value?: string; // –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  images?: string[]; // –º–∞—Å—Å–∏–≤ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
}

export default function ArticleEditor({
  content,
  onChange,
  value,
  images = [],
}: ArticleEditorProps) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º value –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ content
  const currentContent = value || content;
  const [imageDialogOpen, setImageDialogOpen] = useState(false);
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [linkDialogOpen, setLinkDialogOpen] = useState(false);
  const [linkUrl, setLinkUrl] = useState("");
  const [linkText, setLinkText] = useState("");
  const fileInputRef = useRef<HTMLInputElement>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ Tiptap
  const editor = useEditor({
    extensions: [
      StarterKit.configure({
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ orderedList –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        orderedList: {
          keepMarks: true,
          keepAttributes: true, // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–µ–∂–¥—É —Å–ø–∏—Å–∫–∞–º–∏
        },
        bulletList: {
          keepMarks: true,
          keepAttributes: true,
        },
        // –£–ª—É—á—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        history: {
          depth: 100,
          newGroupDelay: 500,
        },
      }),
      Image.configure({
        inline: false,
        allowBase64: true,
        HTMLAttributes: {
          class: "editor-image",
        },
      }),
      Link.configure({
        openOnClick: true,
        HTMLAttributes: {
          rel: "noopener noreferrer",
          class: "text-blue-500 underline",
        },
      }),
      Placeholder.configure({
        placeholder: "–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é –∑–¥–µ—Å—å...",
      }),
      TextStyle,
      Color,
    ],
    content: currentContent,
    onUpdate: ({ editor }) => {
      onChange(editor.getHTML());
    },
    editorProps: {
      attributes: {
        class:
          "prose prose-sm sm:prose lg:prose-lg xl:prose-2xl mx-auto focus:outline-none",
      },
      handleDOMEvents: {
        keydown: (_, event) => {
          // –£–ª—É—á—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
          if (event.key === "Backspace" || event.key === "Delete") {
            // –ü–æ–∑–≤–æ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å—Å—è
            return false;
          }
          return false;
        },
        click: (view, event) => {
          // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
          const target = event.target as HTMLElement;

          // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          if (target.tagName === "IMG") {
            event.preventDefault();

            try {
              const pos = view.posAtDOM(target, 0);
              const $pos = view.state.doc.resolve(pos);

              // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              const after = Math.min($pos.after(), view.state.doc.content.size);

              if (after > 0 && after <= view.state.doc.content.size) {
                // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TextSelection –∏–∑ prosemirror-state
                const { TextSelection } = require("prosemirror-state");
                const selection = TextSelection.near(
                  view.state.doc.resolve(after)
                );
                const tr = view.state.tr.setSelection(selection);
                view.dispatch(tr);
              }
            } catch (error) {
              console.log("Error positioning cursor:", error);
            }

            return true;
          }

          // –î–ª—è –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
          return false;
        },
      },
    },
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  useEffect(() => {
    if (!editor) return;

    console.log("üîÑ Processing structured content with image markers");
    console.log("Current content:", currentContent);

    if (currentContent && currentContent.includes("IMAGE_PLACEHOLDER_")) {
      processStructuredContent();
    } else if (currentContent !== editor.getHTML()) {
      // –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –µ—Å–ª–∏ –Ω–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤
      console.log("üìù Simple content update");
      editor.commands.setContent(currentContent || "");
    }
  }, [currentContent, editor]);

  const processStructuredContent = () => {
    if (!editor || !currentContent) return;

    console.log("üßπ CLEARING editor and processing structured content");
    console.log("Raw content before cleaning:", currentContent);

    // –•–ê–†–î–ö–û–î–ù–û –û–ß–ò–©–ê–ï–ú –í–°–ï –î–£–ë–õ–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
    let cleanedContent = currentContent;

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏ img –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ–Ω–∏ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è)
    cleanedContent = cleanedContent.replace(/<img[^>]*>/gi, "");

    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    cleanedContent = cleanedContent.replace(/<p[^>]*>\s*<\/p>/gi, "");

    // –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ br —Ç–µ–≥–∏
    cleanedContent = cleanedContent.replace(/(<br\s*\/?>){2,}/gi, "<br>");

    console.log("üßΩ Content after cleaning:", cleanedContent);

    // –û—á–∏—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é
    editor.commands.clearContent();

    // –†–∞–∑–±–∏—Ä–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —á–∞—Å—Ç—è–º
    const parts = cleanedContent.split(
      /(<p data-image-id="[^"]*" data-image-url="[^"]*"><!--IMAGE_PLACEHOLDER_\d+--><\/p>)/
    );

    console.log("ÔøΩ Content parts found:", parts.length, parts);

    parts.forEach((part, index) => {
      if (part.includes("IMAGE_PLACEHOLDER_")) {
        // –≠—Ç–æ –º–∞—Ä–∫–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const imageUrlMatch = part.match(/data-image-url="([^"]*)"/);
        const imageIdMatch = part.match(/data-image-id="([^"]*)"/);

        if (imageUrlMatch && imageIdMatch) {
          const imageUrl = imageUrlMatch[1];
          const imageId = imageIdMatch[1];

          console.log(`üñºÔ∏è INSERTING image with ID ${imageId}: ${imageUrl}`);

          // –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          const imageHtml = `<p data-image-id="${imageId}"><img src="${imageUrl}" alt="Article image" style="max-width: 100%; height: auto;" /></p>`;
          editor.commands.insertContent(imageHtml);
        }
      } else if (part.trim()) {
        // –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        console.log(
          `üìù INSERTING text part ${index}:`,
          part.substring(0, 50) + "..."
        );
        editor.commands.insertContent(part);
      }
    });

    console.log("‚úÖ Structured content processing COMPLETE");
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setImageFile(file);

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
      const reader = new FileReader();
      reader.onload = (event) => {
        setImagePreview(event.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const uploadImage = async () => {
    if (!imageFile) return null;

    try {
      setIsUploading(true);

      const formData = new FormData();
      formData.append("image", imageFile);

      const response = await axios.post("/api/upload-image", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      return response.data.imageUrl;
    } catch (error) {
      console.error("Error uploading image:", error);
      return null;
    } finally {
      setIsUploading(false);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
  const insertImage = async () => {
    if (imageFile && editor) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const imageUrl = await uploadImage();

      // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
      const src = imageUrl || imagePreview;

      if (src) {
        // –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        editor
          .chain()
          .focus()
          .setImage({
            src: src,
            alt: imageFile.name || "Uploaded image",
            title: imageFile.name || "Uploaded image",
          })
          .run();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        const html = editor.getHTML();
        onChange(html);
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
      setImageDialogOpen(false);
      setImageFile(null);
      setImagePreview(null);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
  const insertLink = () => {
    if (editor && linkUrl) {
      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º URL
      const text = linkText || linkUrl;

      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –¥–µ–ª–∞–µ–º –µ–≥–æ —Å—Å—ã–ª–∫–æ–π
      if (editor.state.selection.empty && text) {
        // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ —Å—Å—ã–ª–∫—É
        editor
          .chain()
          .focus()
          .insertContent(`<a href="${linkUrl}" target="_blank">${text}</a>`)
          .run();
      } else {
        // –î–µ–ª–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–æ–π
        editor
          .chain()
          .focus()
          .setLink({ href: linkUrl, target: "_blank" })
          .run();
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      const html = editor.getHTML();
      onChange(html);

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—è
      setLinkDialogOpen(false);
      setLinkUrl("");
      setLinkText("");
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const toggleBold = () => editor?.chain().focus().toggleBold().run();
  const toggleItalic = () => editor?.chain().focus().toggleItalic().run();
  const toggleHeading1 = () =>
    editor?.chain().focus().toggleHeading({ level: 1 }).run();
  const toggleHeading2 = () =>
    editor?.chain().focus().toggleHeading({ level: 2 }).run();
  const toggleBulletList = () =>
    editor?.chain().focus().toggleBulletList().run();
  const toggleOrderedList = () =>
    editor?.chain().focus().toggleOrderedList().run();
  const toggleBlockquote = () =>
    editor?.chain().focus().toggleBlockquote().run();
  const setHardBreak = () => editor?.chain().focus().setHardBreak().run();
  const toggleCodeBlock = () => editor?.chain().focus().toggleCodeBlock().run();
  const undo = () => editor?.chain().focus().undo().run();
  const redo = () => editor?.chain().focus().redo().run();
  const unsetLink = () => editor?.chain().focus().unsetLink().run();

  return (
    <div className="border border-border rounded-md overflow-hidden">
      <div className="bg-secondary p-2 flex flex-wrap gap-1 border-b border-border">
        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={toggleBold}
          className={editor?.isActive("bold") ? "bg-accent" : ""}
          title="–ñ–∏—Ä–Ω—ã–π"
        >
          <Bold size={16} />
        </Button>
        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={toggleItalic}
          className={editor?.isActive("italic") ? "bg-accent" : ""}
          title="–ö—É—Ä—Å–∏–≤"
        >
          <Italic size={16} />
        </Button>
        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={toggleHeading1}
          className={
            editor?.isActive("heading", { level: 1 }) ? "bg-accent" : ""
          }
          title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1"
        >
          <Heading1 size={16} />
        </Button>
        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={toggleHeading2}
          className={
            editor?.isActive("heading", { level: 2 }) ? "bg-accent" : ""
          }
          title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2"
        >
          <Heading2 size={16} />
        </Button>
        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={toggleBulletList}
          className={editor?.isActive("bulletList") ? "bg-accent" : ""}
          title="–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        >
          <List size={16} />
        </Button>
        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={toggleOrderedList}
          className={editor?.isActive("orderedList") ? "bg-accent" : ""}
          title="–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        >
          <ListOrdered size={16} />
        </Button>
        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={toggleBlockquote}
          className={editor?.isActive("blockquote") ? "bg-accent" : ""}
          title="–¶–∏—Ç–∞—Ç–∞"
        >
          <TextQuote size={16} />
        </Button>
        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={toggleCodeBlock}
          className={editor?.isActive("codeBlock") ? "bg-accent" : ""}
          title="–ë–ª–æ–∫ –∫–æ–¥–∞"
        >
          <Code size={16} />
        </Button>
        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={setHardBreak}
          title="–†–∞–∑—Ä—ã–≤ —Å—Ç—Ä–æ–∫–∏"
        >
          <Pilcrow size={16} />
        </Button>

        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
        <Dialog open={imageDialogOpen} onOpenChange={setImageDialogOpen}>
          <DialogTrigger asChild>
            <Button
              type="button"
              variant="ghost"
              size="sm"
              title="–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            >
              <FileImage size={16} />
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</DialogTitle>
            </DialogHeader>
            <div className="flex flex-col gap-4">
              <Input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handleImageChange}
              />
              {imagePreview && (
                <div className="mt-2">
                  <p className="text-sm mb-2">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</p>
                  <img
                    src={imagePreview}
                    alt="Preview"
                    className="max-w-full max-h-[200px] object-contain border rounded"
                  />
                </div>
              )}
              <Button
                type="button"
                onClick={insertImage}
                disabled={!imagePreview || isUploading}
                className="image-upload-button"
              >
                {isUploading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–î–æ–±–∞–≤–∏—Ç—å"}
              </Button>
            </div>
          </DialogContent>
        </Dialog>

        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ */}
        <Dialog open={linkDialogOpen} onOpenChange={setLinkDialogOpen}>
          <DialogTrigger asChild>
            <Button
              type="button"
              variant="ghost"
              size="sm"
              title="–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"
              className={editor?.isActive("link") ? "bg-accent" : ""}
            >
              <LinkIcon size={16} />
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É</DialogTitle>
            </DialogHeader>
            <div className="flex flex-col gap-4">
              <div className="grid gap-2">
                <Label htmlFor="url">URL</Label>
                <Input
                  id="url"
                  type="url"
                  placeholder="https://example.com"
                  value={linkUrl}
                  onChange={(e) => setLinkUrl(e.target.value)}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="text">–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
                <Input
                  id="text"
                  type="text"
                  placeholder="–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏"
                  value={linkText}
                  onChange={(e) => setLinkText(e.target.value)}
                />
              </div>
              <div className="flex gap-2">
                <Button
                  type="button"
                  onClick={insertLink}
                  disabled={!linkUrl}
                  className="flex-1"
                >
                  –î–æ–±–∞–≤–∏—Ç—å
                </Button>
                {editor?.isActive("link") && (
                  <Button
                    type="button"
                    variant="destructive"
                    onClick={() => {
                      unsetLink();
                      setLinkDialogOpen(false);
                    }}
                  >
                    –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É
                  </Button>
                )}
              </div>
            </div>
          </DialogContent>
        </Dialog>

        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={undo}
          title="–û—Ç–º–µ–Ω–∏—Ç—å"
        >
          <Undo size={16} />
        </Button>
        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={redo}
          title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
        >
          <Redo size={16} />
        </Button>
      </div>

      {/* –†–µ–¥–∞–∫—Ç–æ—Ä Tiptap */}
      <div className="tiptap-editor-wrapper">
        {editor && (
          <BubbleMenu editor={editor} tippyOptions={{ duration: 100 }}>
            <div className="flex bg-white border rounded-md shadow-sm">
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={toggleBold}
              >
                <Bold size={14} />
              </Button>
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={toggleItalic}
              >
                <Italic size={14} />
              </Button>
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={() => setLinkDialogOpen(true)}
                className={editor.isActive("link") ? "bg-accent" : ""}
              >
                <LinkIcon size={14} />
              </Button>
            </div>
          </BubbleMenu>
        )}
        <EditorContent
          editor={editor}
          className="p-4 min-h-[400px] prose max-w-none editor-content"
        />
      </div>

      {/* –°—Ç–∏–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç–∏–ª—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ */}
      <style jsx global>{`
        /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
        .bg-accent svg {
          color: #000 !important; /* –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –∏–∫–æ–Ω–æ–∫ –¥–∞–∂–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */
        }

        /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ */
        .tiptap-editor-wrapper .ProseMirror {
          outline: none;
          min-height: 400px;
          font-family: inherit;
        }

        /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
        .tiptap-editor-wrapper .ProseMirror p {
          margin: 0.5em 0;
        }

        /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è placeholder */
        .tiptap-editor-wrapper
          .ProseMirror
          p.is-editor-empty:first-child::before {
          color: #9ca3af;
          content: attr(data-placeholder);
          float: left;
          height: 0;
          pointer-events: none;
        }

        /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ */
        .tiptap-editor-wrapper .ProseMirror img {
          max-width: 100%;
          height: auto;
          margin: 1rem 0;
          border-radius: 0.25rem;
          display: block;
          cursor: pointer;
        }

        /* –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤–æ–∫—Ä—É–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ */
        .tiptap-editor-wrapper .ProseMirror img + p,
        .tiptap-editor-wrapper .ProseMirror p + img {
          margin-top: 1rem;
        }

        /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */
        .tiptap-editor-wrapper .ProseMirror p:empty {
          min-height: 1.5em;
          margin: 0.25rem 0;
        }

        /* –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ UX */
        .tiptap-editor-wrapper .ProseMirror {
          line-height: 1.6;
          padding: 1rem;
        }

        /* –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */
        .tiptap-editor-wrapper .ProseMirror img.ProseMirror-selectednode {
          outline: 2px solid #3b82f6;
          outline-offset: 2px;
        }

        /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
        .tiptap-editor-wrapper .ProseMirror h1 {
          font-size: 1.75rem;
          font-weight: 600;
          margin-top: 1rem;
          margin-bottom: 0.5rem;
        }

        .tiptap-editor-wrapper .ProseMirror h2 {
          font-size: 1.5rem;
          font-weight: 600;
          margin-top: 1rem;
          margin-bottom: 0.5rem;
        }

        /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ */
        .tiptap-editor-wrapper .ProseMirror ul,
        .tiptap-editor-wrapper .ProseMirror ol {
          padding-left: 1.5rem;
          margin: 0.5rem 0;
        }

        /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ü–∏—Ç–∞—Ç */
        .tiptap-editor-wrapper .ProseMirror blockquote {
          border-left: 3px solid #e2e8f0;
          padding-left: 1rem;
          margin-left: 0;
          margin-right: 0;
          font-style: italic;
        }

        /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ */
        .tiptap-editor-wrapper .ProseMirror pre {
          background-color: #f1f5f9;
          border-radius: 0.25rem;
          padding: 0.75rem;
          font-family: monospace;
          overflow-x: auto;
        }

        /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ */
        .tiptap-editor-wrapper .ProseMirror a {
          color: #3b82f6;
          text-decoration: underline;
          cursor: pointer;
        }

        /* –£–ª—É—á—à–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ */
        .tiptap-editor-wrapper .ProseMirror ::selection {
          background: rgba(59, 130, 246, 0.2);
        }
      `}</style>
    </div>
  );
}
