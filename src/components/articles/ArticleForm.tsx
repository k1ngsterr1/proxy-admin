"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import ArticleEditor from "./Editor";
import {
  articlesApi,
  Article,
  CreateArticleDto,
  UpdateArticleDto,
} from "@/lib/api/articles";
import { useMutation, useQueryClient } from "@tanstack/react-query";

interface ArticleFormProps {
  article?: Article;
  isEditing?: boolean;
  lang?: "ru" | "en";
}

export default function ArticleForm({
  article,
  isEditing = false,
  lang = "ru",
}: ArticleFormProps) {
  const router = useRouter();
  const queryClient = useQueryClient();

  // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é, –±–µ—Ä–µ–º —è–∑—ã–∫ –∏–∑ —Å—Ç–∞—Ç—å–∏, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø—Å lang
  const [articleLang, setArticleLang] = useState<"ru" | "en">(
    article?.lang || lang
  );
  const [title, setTitle] = useState(article?.title || "");
  const [content, setContent] = useState(article?.content || "");
  const [images, setImages] = useState<string[]>(article?.images || []);
  const [imageFile, setImageFile] = useState<File | null>(null);

  // This function is now just for display purposes
  const extractImagesFromContent = (htmlContent: string): string[] => {
    const tempDiv = document.createElement("div");
    tempDiv.innerHTML = htmlContent;

    const imgElements = tempDiv.querySelectorAll("img");

    // Extract image URLs and filter out data URLs
    const imageUrls = Array.from(imgElements)
      .map((img) => img.src)
      .filter((src) => !src.startsWith("data:")); // Only keep actual URLs, not data URLs

    console.log("Extracted image URLs:", imageUrls);
    return imageUrls;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è URL –≤ File
  const urlToFile = async (
    url: string,
    filename: string,
    mimeType: string
  ): Promise<File> => {
    const response = await fetch(url);
    const blob = await response.blob();
    return new File([blob], filename, { type: mimeType });
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏
  useEffect(() => {
    if (article) {
      console.log("Article data updated:", article);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –∏–∑ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏
      setTitle(article.title || "");
      setImages(article.images || []);
      setArticleLang(article.lang || "ru");

      // –ù–∞—á–∏–Ω–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      let finalContent = article.content || "";

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤–µ images, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
      if (article.images && article.images.length > 0) {
        const imagesInContent = extractImagesFromContent(finalContent);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º URL –≤ —Å—Ç—Ä–æ–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const simpleCheck = article.images.filter(
          (imageUrl) => !finalContent.includes(imageUrl)
        );

        const missingImages = article.images.filter(
          (imageUrl) =>
            !imagesInContent.includes(imageUrl) &&
            !finalContent.includes(imageUrl)
        );

        console.log("üîç Image integration check:", {
          contentLength: finalContent.length,
          contentPreview: finalContent,
          imagesInContent: imagesInContent,
          imagesInArray: article.images,
          simpleStringCheck: simpleCheck,
          missingImages: missingImages,
        });

        // –î–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ
        // —Ç–∞–∫ –∫–∞–∫ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ "<p><strong>–¢–µ—Å—Ç–æ–≤–∞—è —à—Ç—É–∫–∞...</strong></p><p></p><p>tester</p>"
        // –Ω–µ—Ç URL "https://api.proxy.luxe/uploads/1759322378951-563720451.png"

        // –í–†–ï–ú–ï–ù–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const imagesToAdd = article.images; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ

        if (imagesToAdd.length > 0) {
          console.log("üñºÔ∏è FORCE Adding images to content:", imagesToAdd);

          // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ
          if (finalContent.trim().length < 50) {
            const imageHtml = imagesToAdd
              .map(
                (imageUrl) =>
                  `<p><img src="${imageUrl}" alt="Article image" style="max-width: 100%; height: auto;" /></p>`
              )
              .join("");
            finalContent =
              imageHtml + (finalContent ? "<p></p>" + finalContent : "");
          } else {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü
            const imageHtml = imagesToAdd
              .map(
                (imageUrl) =>
                  `<p><img src="${imageUrl}" alt="Article image" style="max-width: 100%; height: auto;" /></p>`
              )
              .join("");
            finalContent = finalContent + "<p></p>" + imageHtml;
          }

          console.log("Content after adding images:", {
            newContentLength: finalContent.length,
            preview: finalContent.substring(0, 300) + "...",
          });
        }
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
      console.log("üöÄ Setting final content:", {
        originalLength: (article.content || "").length,
        finalLength: finalContent.length,
        originalContent: article.content,
        finalContent: finalContent,
      });

      setContent(finalContent);

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(() => {
        console.log("‚è∞ Force updating content after delay");
        setContent(finalContent);
      }, 100);

      console.log("Updated article data:", {
        title: article.title,
        content: finalContent.substring(0, 100) + "...",
        lang: article.lang,
        images: article.images,
      });
    } else if (!isEditing) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏
      setTitle("");
      setContent("");
      setImages([]);
      setArticleLang(lang);
    }
  }, [article, isEditing, lang]);

  const createMutation = useMutation({
    mutationFn: (article: CreateArticleDto) => articlesApi.create(article), // –±–µ–∑ language
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["articles"] });
      router.push("/admin/articles");
    },
  });

  const updateMutation = useMutation({
    mutationFn: ({ id, data }: { id: string; data: UpdateArticleDto }) =>
      articlesApi.update(id, data),
    onSuccess: (updatedArticle, variables) => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
      queryClient.invalidateQueries({ queryKey: ["articles"] });
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é
      queryClient.invalidateQueries({ queryKey: ["article", variables.id] });
      // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –Ω–∞–ø—Ä—è–º—É—é
      queryClient.setQueryData(["article", variables.id], updatedArticle);
      router.push("/admin/articles");
    },
  });

  // Handle file selection
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      setImageFile(e.target.files[0]);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      // Show loading state
      const submitButton = document.querySelector(
        ".submit-button"
      ) as HTMLButtonElement;
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.textContent = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...";
      }

      console.log("Submitting article with language:", articleLang);

      // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ –µ—Å—Ç—å - —Å–æ –≤—Å–µ–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
      const finalContent = content;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ images (–Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
      const tempDiv = document.createElement("div");
      tempDiv.innerHTML = content;
      const imgElements = tempDiv.querySelectorAll("img");

      // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imageUrls = Array.from(imgElements)
        .map((img) => img.src)
        .filter((src, index, array) => array.indexOf(src) === index); // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

      console.log("Final content with images:", {
        contentLength: finalContent.length,
        imageUrls: imageUrls,
        contentPreview: finalContent.substring(0, 200) + "...",
      });

      // –ò—â–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (data URLs) –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      let newImageFile: File | null = null;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (data URLs) –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
      for (const url of imageUrls) {
        if (url.startsWith("data:image")) {
          try {
            const res = await fetch(url);
            const blob = await res.blob();
            const fileName = `image-${Date.now()}.${
              blob.type.split("/")[1] || "png"
            }`;
            newImageFile = new File([blob], fileName, { type: blob.type });
            console.log("Found new image to upload:", fileName);
            break; // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          } catch (err) {
            console.error("Error converting data URL to file:", err);
          }
        }
      }

      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∫–∞–∫ –µ—Å—Ç—å
      const articleData: CreateArticleDto | UpdateArticleDto = {
        title,
        content: finalContent, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        lang: articleLang,
      };

      console.log("Article data:", {
        title: articleData.title,
        contentLength: articleData.content?.length || 0,
        lang: articleData.lang,
        hasNewImage: !!newImageFile,
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (newImageFile) {
        articleData.images = newImageFile;
        console.log("Adding new image file to article data");
      }

      if (isEditing && article?.id) {
        updateMutation.mutate({
          id: article.id,
          data: articleData,
        });
      } else {
        createMutation.mutate(articleData as CreateArticleDto);
      }
    } catch (error) {
      console.error("Error submitting article:", error);
    } finally {
      // Reset button state
      const submitButton = document.querySelector(
        ".submit-button"
      ) as HTMLButtonElement;
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.textContent = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å";
      }
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <Card>
        <CardHeader>
          <CardTitle>
            {isEditing ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é" : "–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è"}
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="title">–ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
            <Input
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏"
              required
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="content">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</Label>
            <ArticleEditor content={content} onChange={setContent} />
          </div>
        </CardContent>
        <CardFooter className="flex justify-between">
          <Button
            type="button"
            variant="outline"
            onClick={() => router.push("/admin/articles")}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            type="submit"
            disabled={createMutation.isPending || updateMutation.isPending}
            className="submit-button"
          >
            {createMutation.isPending || updateMutation.isPending
              ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..."
              : isEditing
              ? "–û–±–Ω–æ–≤–∏—Ç—å"
              : "–°–æ–∑–¥–∞—Ç—å"}
          </Button>
        </CardFooter>
      </Card>
    </form>
  );
}
